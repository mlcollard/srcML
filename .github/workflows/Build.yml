---
name: Build

on: workflow_dispatch

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Ubuntu
        shell: bash
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt install antlr libantlr-dev libantlr-java libarchive-dev \
                           libcurl4-openssl-dev libxml2-utils libxslt1-dev \
                           ninja-build


      - name: Setup macOS
        shell: bash
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install ninja antlr2 --display-times


      - name: Setup Windows
        uses: microsoft/setup-msbuild@v1
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Create build directory
        shell: bash
        run: mkdir build

      - name: CMake Setup on Windows
        shell: bash
        if: ${{ matrix.os == 'windows-latest' }}
        working-directory: build
        run: |
          export UseMultiToolTask=true
          cmake ..

      - name: CMake Setup on Ubuntu/macOS
        shell: bash
        if: ${{ matrix.os != 'windows-latest' }}
        working-directory: build
        run: |
          cmake .. -G Ninja

      - name: Build
        shell: bash
        working-directory: build
        run: |
          export UseMultiToolTask=true
          cmake --build . --config Release

      - name: Install on Windows
        shell: bash
        if: ${{ matrix.os == 'windows-latest' }}
        working-directory: build
        run: |
          cmake --build . --config Release --target install

      - name: Install on Ubuntu/macOS
        shell: bash
        if: ${{ matrix.os != 'windows-latest' }}
        working-directory: build
        run: |
          sudo cmake --build . --config Release --target install

      - name: Finish install for Ubuntu
        shell: bash
        if: ${{ matrix.os == 'ubuntu-latest' }}
        working-directory: build
        run: |
          sudo ldconfig

      - name: Set PATH for Windows
        shell: bash
        if: ${{ matrix.os == 'windows-latest' }}
        working-directory: build
        run: |
          echo "/c/Program Files (x86)/srcML/bin" >> $GITHUB_PATH

      - name: Run Installed srcml
        shell: bash
        working-directory: build
        run: |
          srcml --version
          srcml --text="int a;" -l C++
