// SPDX-License-Identifier: GPL-3.0-only
/**
 * @file Mode.cpp
 *
 * @copyright Copyright (C) 2014-2019 srcML, LLC. (www.srcML.org)
 *
 * This file is part of the srcML Toolkit.
 */

#include <ModeStack.hpp>

/* Set of mode flags */
const srcMLState::MODE_TYPE ModeStack::MODE_STATEMENT                 ("0000000000000000000000000000000000000000000000000000000000000001");
const srcMLState::MODE_TYPE ModeStack::MODE_LIST                      ("0000000000000000000000000000000000000000000000000000000000000010");
const srcMLState::MODE_TYPE ModeStack::MODE_EXPECT                    ("0000000000000000000000000000000000000000000000000000000000000100");
const srcMLState::MODE_TYPE ModeStack::MODE_DETECT_COLON              ("0000000000000000000000000000000000000000000000000000000000001000");
const srcMLState::MODE_TYPE ModeStack::MODE_TEMPLATE                  ("0000000000000000000000000000000000000000000000000000000000010000");
const srcMLState::MODE_TYPE ModeStack::MODE_ARGUMENT                  ("0000000000000000000000000000000000000000000000000000000000100000");
const srcMLState::MODE_TYPE ModeStack::MODE_NAMESPACE                 ("0000000000000000000000000000000000000000000000000000000001000000");
const srcMLState::MODE_TYPE ModeStack::MODE_PARAMETER                 ("0000000000000000000000000000000000000000000000000000000010000000");
const srcMLState::MODE_TYPE ModeStack::MODE_EXPRESSION                ("0000000000000000000000000000000000000000000000000000000100000000");
const srcMLState::MODE_TYPE ModeStack::MODE_CALL                      ("0000000000000000000000000000000000000000000000000000001000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_CONDITION                 ("0000000000000000000000000000000000000000000000000000010000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TOP                       ("0000000000000000000000000000000000000000000000000000100000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_BLOCK                     ("0000000000000000000000000000000000000000000000000001000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_INIT                      ("0000000000000000000000000000000000000000000000000010000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FUNCTION_TAIL             ("0000000000000000000000000000000000000000000000000100000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_PARSE_EOL                 ("0000000000000000000000000000000000000000000000001000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_LOCAL                     ("0000000000000000000000000000000000000000000000010000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_VARIABLE_NAME             ("0000000000000000000000000000000000000000000000100000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_IF                        ("0000000000000000000000000000000000000000000001000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TOP_SECTION               ("0000000000000000000000000000000000000000000010000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_CONTROL                   ("0000000000000000000000000000000000000000000100000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_CONTROL_INITIALIZATION    ("0000000000000000000000000000000000000000001000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_CONTROL_CONDITION         ("0000000000000000000000000000000000000000010000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_CONTROL_INCREMENT         ("0000000000000000000000000000000000000000100000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_PREPROC                   ("0000000000000000000000000000000000000001000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_NEST                      ("0000000000000000000000000000000000000010000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_EXPRESSION_BLOCK          ("0000000000000000000000000000000000000100000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_INTERNAL_END_PAREN        ("0000000000000000000000000000000000001000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ACCESS_REGION             ("0000000000000000000000000000000000010000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_DO_STATEMENT              ("0000000000000000000000000000000000100000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_IGNORE_TERMINATE          ("0000000000000000000000000000000001000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_USING                     ("0000000000000000000000000000000010000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_EXTERN                    ("0000000000000000000000000000000100000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TRAILING_RETURN           ("0000000000000000000000000000001000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_INTERNAL_END_CURLY        ("0000000000000000000000000000010000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ISSUE_EMPTY_AT_POP        ("0000000000000000000000000000100000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_INITIALIZATION_LIST       ("0000000000000000000000000001000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_CLASS                     ("0000000000000000000000000010000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_AT_ENDIF              ("0000000000000000000000000100000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_AT_BLOCK              ("0000000000000000000000001000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_ONLY_AT_RPAREN        ("0000000000000000000000010000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_AT_BLOCK_NO_TERMINATE ("0000000000000000000000100000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ARGUMENT_LIST             ("0000000000000000000001000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ASSOCIATION_LIST          ("0000000000000000000010000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FUNCTION_NAME             ("0000000000000000000100000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ELSE                      ("0000000000000000001000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TYPEDEF                   ("0000000000000000010000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_DECL                      ("0000000000000000100000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_EAT_TYPE                  ("0000000000000001000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FUNCTION_PARAMETER        ("0000000000000010000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TERNARY                   ("0000000000000100000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_OBJECTIVE_C_CALL          ("0000000000001000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_INNER_DECL                ("0000000000010000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_SWITCH                    ("0000000000100000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TERNARY_CONDITION         ("0000000001000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_THEN                      ("0000000010000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_IN_INIT                   ("0000000100000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TRY                       ("0000001000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_LIST_AT_BLOCK         ("0000010000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_TEMPLATE_PARAMETER_LIST   ("0000100000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ONLY_END_TERMINATE        ("0001000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ENUM                      ("0010000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ANONYMOUS                 ("0100000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_AT_COMMA              ("1000000000000000000000000000000000000000000000000000000000000000");

// Modes greater than 64-bit
const srcMLState::MODE_TYPE ModeStack::MODE_RANGED_FOR               ("10000000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_ASSOCIATION_TYPE        ("100000000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FRIEND                 ("1000000000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_CLASS_NAME            ("10000000000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FUNCTION_BODY        ("100000000000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FUNCTION_TYPE       ("1000000000000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_END_CONTROL        ("10000000000000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FOR_LIKE_LIST     ("100000000000000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_FUNCTION_CALL    ("1000000000000000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_IF_STATEMENT    ("10000000000000000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_BLOCK_CONTENT  ("100000000000000000000000000000000000000000000000000000000000000000000000000");
const srcMLState::MODE_TYPE ModeStack::MODE_NO_BLOCK_CONTENT  ("1000000000000000000000000000000000000000000000000000000000000000000000000000");
