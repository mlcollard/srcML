@PACKAGE_INIT@

cmake_minimum_required(VERSION 3.24)

list(APPEND CMAKE_MODULE_PATH "@PACKAGE_cmakeModulesDir@")

set(libsrcml_known_comps static shared)
set(libsrcml_comp_static NO)
set(libsrcml_comp_shared NO)
foreach (libsrcml_comp IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS)
    if (libsrcml_comp IN_LIST libsrcml_known_comps)
        set(libsrcml_comp_${libsrcml_comp} YES)
    else ()
        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
            "libsrcml does not recognize component `${libsrcml_comp}`.")
        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
        return()
    endif ()
endforeach ()

if (libsrcml_comp_static AND libsrcml_comp_shared)
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
        "libsrcml `static` and `shared` components are mutually exclusive.")
    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    return()
endif ()

set(libsrcml_static_targets "${CMAKE_CURRENT_LIST_DIR}/libsrcml-static-targets.cmake")
set(libsrcml_shared_targets "${CMAKE_CURRENT_LIST_DIR}/libsrcml-shared-targets.cmake")

macro(libsrcml_load_targets type)
    if (NOT EXISTS "${libsrcml_${type}_targets}")
        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
            "libsrcml `${type}` libraries were requested but not found.")
        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
        return()
    endif ()
    include("${libsrcml_${type}_targets}")
endmacro()

set(COMP "")
if (libsrcml_comp_static)
    set(COMP static) # libsrcml_load_targets(static)
elseif (libsrcml_comp_shared)
    set(COMP shared) # libsrcml_load_targets(shared)
elseif (DEFINED libsrcml_SHARED_LIBS AND libsrcml_SHARED_LIBS)
    set(COMP shared) # libsrcml_load_targets(shared)
elseif (DEFINED libsrcml_SHARED_LIBS AND NOT libsrcml_SHARED_LIBS)
    set(COMP static) # libsrcml_load_targets(static)
elseif (BUILD_SHARED_LIBS)
    if (EXISTS "${libsrcml_shared_targets}")
        set(COMP shared) # libsrcml_load_targets(shared)
    else ()
        set(COMP static) # libsrcml_load_targets(static)
    endif ()
else ()
    if (EXISTS "${libsrcml_static_targets}")
        set(COMP static) # libsrcml_load_targets(static)
    else ()
        set(COMP shared) # libsrcml_load_targets(shared)
    endif ()
endif ()
message("COMP: ${COMP}")
libsrcml_load_targets(${COMP})

find_path(LibsrcML_INCLUDE_DIR
  NAMES srcml.h
  PATHS
  "[HKEY_LOCAL_MACHINE\\SOFTWARE\\GnuWin32\\LibArchive;InstallPath]/include"
  DOC "libarchive include directory"
)

# Add the include file
target_include_directories(libsrcml::libsrcml_${COMP} PUBLIC INTERFACE ${LibsrcML_INCLUDE_DIR})
unset(LibsrcML_INCLUDE_DIR)

# Find dependencies
find_package(LibXml2 REQUIRED)
find_package(Iconv REQUIRED)
find_package(LibXslt REQUIRED)

add_library(LibsrcML::LibsrcML ALIAS libsrcml::libsrcml_${COMP})
