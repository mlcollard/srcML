<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" language="Python" url="call">

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>print</name><argument_list>()</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Hello World"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Hello"</literal></expr></argument>, <argument><expr><literal type="string">"World"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>eval</name><argument_list>(<argument><expr><literal type="string">"4+6"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>invert</name><argument_list>(<argument><expr><call><name>invert</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><call><name>get_func</name><argument_list>()</argument_list></call><argument_list>()</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name><name>sample</name><index>[<expr><literal type="string">"a"</literal></expr>]</index></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name><name>sample</name><index>[<expr><literal type="string">"a"</literal></expr>]</index><index>[<expr><literal type="string">"b"</literal></expr>]</index></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>b</name><index>[<expr><literal type="string">'default'</literal></expr>]</index></name><argument_list>(
    <argument><name>input</name>=<expr><call><name><name>c</name><operator>.</operator><name>call_one</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>b</name><operator>.</operator><name>c</name><index>[<expr><literal type="string">'default'</literal></expr>]</index></name><argument_list>(
    <argument><name>input</name>=<expr><call><name><name>d</name><operator>.</operator><name>call_one</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>result</name> <operator>=</operator> <tuple><expr><name><name>a</name><operator>.</operator><name>b</name></name></expr>, <expr><call><name><name>c</name><operator>.</operator><name>d</name><operator>.</operator><name>e</name><index>[<expr><literal type="string">'default'</literal></expr>]</index></name><argument_list>(
    <argument><name>input</name>=<expr><call><name><name>f</name><operator>.</operator><name>call_one</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>
)</argument_list></call></expr></tuple></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>example</name></name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>b</name><operator>.</operator><name>c</name><index>[<expr><literal type="string">'default'</literal></expr>]</index></name><argument_list>(
    <argument><name>input</name>=<expr><call><name><name>d</name><operator>.</operator><name>call_one</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>example</name><argument_list>(<argument><expr><call><name><name>sample</name><index>[<expr><literal type="string">"a"</literal></expr>]</index></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name><name>example</name><index>[<expr><literal type="string">"a"</literal></expr>]</index></name><argument_list>(<argument><expr><call><name><name>sample</name><index>[<expr><literal type="string">"b"</literal></expr>]</index></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>sample</name><argument_list>(
    <argument><expr><name>a</name> <operator>*</operator> <operator>(</operator>
        <call><name>b</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>c</name><operator>)</operator></expr></argument>)</argument_list></call>
    <operator>)</operator></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>x</name> <operator>=</operator> <lambda>lambda <parameter><name>a</name></parameter>, <parameter><name>b</name></parameter>, <parameter><name>c</name></parameter>: <expr><call><name>sample</name><argument_list>(
    <argument><expr><name>a</name> <operator>*</operator> <operator>(</operator>
        <call><name>b</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>c</name><operator>)</operator></expr></argument>)</argument_list></call>
    <operator>)</operator></expr></argument>
)</argument_list></call></expr></lambda></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><operator>(</operator>
    <tuple>(<expr><lambda>lambda <parameter><name>x</name></parameter>: <expr><call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><name>x</name><operator>**</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></lambda></expr>, <expr><literal type="boolean">False</literal></expr>)</tuple>
<operator>)</operator></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><operator>(</operator>
    <tuple>(<expr><lambda>lambda <parameter><name>x</name></parameter>: <expr><call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><tuple>(<expr><operator>(</operator><name>x</name><operator>)</operator></expr>, <expr><name>x</name><operator>**</operator><literal type="number">2</literal></expr>)</tuple></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></lambda></expr>, <expr><literal type="boolean">False</literal></expr>)</tuple>
<operator>)</operator></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><tuple>(
    <expr><tuple>(<expr><lambda>lambda <parameter><name>x</name></parameter>: <expr><call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><name>x</name><operator>**</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></lambda></expr>, <expr><literal type="boolean">False</literal></expr>)</tuple></expr>,
    <expr><literal type="boolean">True</literal></expr>
)</tuple></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><tuple>(
    <expr><tuple>(<expr><lambda>lambda <parameter><name>x</name></parameter>: <expr><call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><tuple>(<expr><operator>(</operator><name>x</name><operator>)</operator></expr>, <expr><name>x</name><operator>**</operator><literal type="number">2</literal></expr>)</tuple></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></lambda></expr>, <expr><literal type="boolean">False</literal></expr>)</tuple></expr>,
    <expr><literal type="boolean">True</literal></expr>
)</tuple></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><array>[
    <expr><tuple>(<expr><lambda>lambda <parameter><name>x</name></parameter>: <expr><call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><name>x</name><operator>**</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></lambda></expr>, <expr><literal type="boolean">False</literal></expr>)</tuple></expr>,
    <expr><literal type="boolean">True</literal></expr>
]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><array>[
    <expr><tuple>(<expr><lambda>lambda <parameter><name>x</name></parameter>: <expr><call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><tuple>(<expr><operator>(</operator><name>x</name><operator>)</operator></expr>, <expr><name>x</name><operator>**</operator><literal type="number">2</literal></expr>)</tuple></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></lambda></expr>, <expr><literal type="boolean">False</literal></expr>)</tuple></expr>,
    <expr><literal type="boolean">True</literal></expr>
]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><set>{
    <expr><tuple>(<expr><lambda>lambda <parameter><name>x</name></parameter>: <expr><call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><name>x</name><operator>**</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></lambda></expr>, <expr><literal type="boolean">False</literal></expr>)</tuple></expr>,
    <expr><literal type="boolean">True</literal></expr>
}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><set>{
    <expr><tuple>(<expr><lambda>lambda <parameter><name>x</name></parameter>: <expr><call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><tuple>(<expr><operator>(</operator><name>x</name><operator>)</operator></expr>, <expr><name>x</name><operator>**</operator><literal type="number">2</literal></expr>)</tuple></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></lambda></expr>, <expr><literal type="boolean">False</literal></expr>)</tuple></expr>,
    <expr><literal type="boolean">True</literal></expr>
}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><dictionary>{
    <expr><literal type="string">"a"</literal></expr>: <expr><tuple>(<expr><lambda>lambda <parameter><name>x</name></parameter>: <expr><call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><name>x</name><operator>**</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></lambda></expr>, <expr><literal type="boolean">False</literal></expr>)</tuple></expr>,
    <expr><literal type="string">"b"</literal></expr>: <expr><literal type="boolean">True</literal></expr>
}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><dictionary>{
    <expr><literal type="string">"a"</literal></expr>: <expr><tuple>(<expr><lambda>lambda <parameter><name>x</name></parameter>: <expr><call><name>a</name><argument_list>(<argument><expr><call><name>b</name><argument_list>(<argument><expr><tuple>(<expr><operator>(</operator><name>x</name><operator>)</operator></expr>, <expr><name>x</name><operator>**</operator><literal type="number">2</literal></expr>)</tuple></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></lambda></expr>, <expr><literal type="boolean">False</literal></expr>)</tuple></expr>,
    <expr><literal type="string">"b"</literal></expr>: <expr><literal type="boolean">True</literal></expr>
}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<if_stmt><if>if <condition><expr><name>example</name> <operator>is not</operator> <literal type="null">None</literal></expr></condition><block>:<block_content>
    <expr_stmt><expr><name>example</name> <operator>=</operator> <literal type="string">"\n"</literal><operator>.</operator><call><name>join</name><argument_list>(
        <argument><expr><comprehension><for>for <control><expr><name>line</name></expr> <range>in <expr><tuple>(
            <expr><literal type="string">"a"</literal></expr>,
            <expr><literal type="string">"b"</literal></expr>,
            <expr><literal type="string">"c"</literal></expr>,
        )</tuple></expr></range></control></for></comprehension></expr></argument>
    )</argument_list></call></expr></expr_stmt>
</block_content></block></if></if_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<if_stmt><if>if <condition><expr><name>example</name> <operator>is not</operator> <literal type="null">None</literal></expr></condition><block>:<block_content>
    <expr_stmt><expr><name>example</name> <operator>=</operator> <literal type="string">"\n"</literal><operator>.</operator><call><name>join</name><argument_list>(
        <argument><expr><comprehension><for><specifier>async</specifier> for <control><expr><name>line</name></expr> <range>in <expr><tuple>(
            <expr><literal type="string">"a"</literal></expr>,
            <expr><literal type="string">"b"</literal></expr>,
            <expr><literal type="string">"c"</literal></expr>,
        )</tuple></expr></range></control></for></comprehension></expr></argument>
    )</argument_list></call></expr></expr_stmt>
</block_content></block></if></if_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<if_stmt><if>if <condition><expr><name>example</name> <operator>is not</operator> <literal type="null">None</literal></expr></condition><block>:<block_content>
    <expr_stmt><expr><name>example</name> <operator>=</operator> <literal type="string">"\n"</literal><operator>.</operator><call><name>join</name><argument_list>(
        <argument><expr><name>line</name></expr>
        <comprehension><for>for <control><expr><name>line</name></expr> <range>in <expr><tuple>(
            <expr><literal type="string">"a"</literal></expr>,
            <expr><literal type="string">"b"</literal> <ternary>if <condition><expr><literal type="boolean">True</literal></expr></condition> <else>else <expr><literal type="string">""</literal></expr></else></ternary></expr>,
            <expr><literal type="string">"c"</literal></expr>,
        )</tuple></expr></range></control></for>
        <if>if <condition><expr><name>line</name></expr></condition></if></comprehension></argument>
    )</argument_list></call></expr></expr_stmt>
</block_content></block></if></if_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<if_stmt><if>if <condition><expr><name>example</name> <operator>is not</operator> <literal type="null">None</literal></expr></condition><block>:<block_content>
    <expr_stmt><expr><name>example</name> <operator>=</operator> <literal type="string">"\n"</literal><operator>.</operator><call><name>join</name><argument_list>(
        <argument><expr><name>line</name></expr>
        <comprehension><for><specifier>async</specifier> for <control><expr><name>line</name></expr> <range>in <expr><tuple>(
            <expr><literal type="string">"a"</literal></expr>,
            <expr><literal type="string">"b"</literal> <ternary>if <condition><expr><literal type="boolean">True</literal></expr></condition> <else>else <expr><literal type="string">""</literal></expr></else></ternary></expr>,
            <expr><literal type="string">"c"</literal></expr>,
        )</tuple></expr></range></control></for>
        <if>if <condition><expr><name>line</name></expr></condition></if></comprehension></argument>
    )</argument_list></call></expr></expr_stmt>
</block_content></block></if></if_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>example</name><argument_list>(
    <argument><name>input</name>=<expr><operator>(</operator>
        <name>a</name> <ternary>if <condition><expr><literal type="boolean">False</literal></expr></condition> <else>else <expr><call><name>sample</name><argument_list>(<argument><expr><operator>*</operator><call><name>create_array</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary>
    <operator>)</operator></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>example</name><argument_list>(
    <argument><name>input</name>=<expr><operator>(</operator>
        <name>a</name> <ternary>if <condition><expr><literal type="boolean">False</literal></expr></condition> <else>else <expr><call><name>sample</name><argument_list>(<argument><expr><operator>*</operator><call><name>create_array</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary>
    <operator>)</operator></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>example</name><argument_list>(
    <argument><name>input</name>=<expr><operator>(</operator>
        <name>a</name> <ternary>if <condition><expr><literal type="boolean">False</literal></expr></condition> <else>else <expr><call><name>sample</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr></else></ternary>
    <operator>)</operator></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>example</name><argument_list>(
    <argument><name>input</name>=<expr><operator>(</operator>
        <name>a</name> <ternary>if <condition><expr><literal type="boolean">False</literal></expr></condition> <else>else <expr><call><name>sample</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr></else></ternary>
    <operator>)</operator></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>example</name><argument_list>(
    <argument><name>input</name>=<expr><operator>(</operator>
        <name>d</name> <ternary>if <condition><expr><literal type="boolean">False</literal></expr></condition> <else>else <expr><call><name>sample</name><argument_list>(<argument><expr><operator>**</operator><call><name>create_dict</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary>
    <operator>)</operator></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>example</name><argument_list>(
    <argument><name>input</name>=<expr><operator>(</operator>
        <name>d</name> <ternary>if <condition><expr><literal type="boolean">False</literal></expr></condition> <else>else <expr><call><name>sample</name><argument_list>(<argument><expr><operator>**</operator><call><name>create_dict</name><argument_list>(<argument><expr><operator>**</operator><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary>
    <operator>)</operator></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>example</name><argument_list>(
    <argument><name>input</name>=<expr><operator>(</operator>
        <name>d</name> <ternary>if <condition><expr><literal type="boolean">False</literal></expr></condition> <else>else <expr><call><name>sample</name><argument_list>(<argument><expr><operator>**</operator><name>d</name></expr></argument>)</argument_list></call></expr></else></ternary>
    <operator>)</operator></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>example</name><argument_list>(
    <argument><name>input</name>=<expr><operator>(</operator>
        <name>d</name> <ternary>if <condition><expr><literal type="boolean">False</literal></expr></condition> <else>else <expr><call><name>sample</name><argument_list>(<argument><expr><operator>**</operator><name>d</name></expr></argument>, <argument><expr><operator>**</operator><name>d</name></expr></argument>)</argument_list></call></expr></else></ternary>
    <operator>)</operator></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>b</name></name><argument_list>(
    <argument><expr><name>c</name></expr></argument>,
    <argument><expr><lambda>lambda <parameter><name>d</name></parameter>: <expr><call><name>map_arg</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><lambda>lambda <parameter><name>e</name></parameter>: <expr><call><name>load_arg</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><name>value</name>=<expr><literal type="boolean">True</literal></expr></argument>)</argument_list></call></expr></lambda></expr></argument>)</argument_list></call></expr></lambda></expr></argument>,
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><call><name>example</name><argument_list>(<argument><expr><lambda>lambda <parameter><name>x</name></parameter>: <expr><call><name><name>a</name><operator>.</operator><name>b</name></name><argument_list>(<argument><expr><literal type="number">3.14</literal></expr></argument>)</argument_list></call></expr></lambda></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>c</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>call_one</name><argument_list>(
    <argument><name>description</name>=<expr><operator>(</operator>
        <literal type="string">"srcML infrastructure"</literal>
    <operator>)</operator></expr></argument>,
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><tuple><expr><name>a</name></expr>, <expr><name>b</name></expr></tuple> <operator>=</operator> <call><name>call_one</name><argument_list>(
    <argument><expr><operator>(</operator>
        <name>c</name>
        <comprehension><for>for <control><expr><name>d</name></expr> <range>in <expr><call><name>call_two</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></range></control></for>
        <if>if <condition><expr><name>d</name> <operator>==</operator> <literal type="string">"srcML"</literal></expr></condition></if></comprehension>
    <operator>)</operator></expr></argument>,
    <argument><expr><tuple>(<expr><literal type="null">None</literal></expr>, <expr><literal type="null">None</literal></expr>)</tuple></expr></argument>,
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<if_stmt><if>if <condition><expr><name>objects</name></expr></condition><block>:<block_content>
    <expr_stmt><expr><name><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>call_one</name><argument_list>(
        <argument><expr><lambda>lambda <parameter><name>a</name></parameter>: <expr><name>a</name> <ternary>if <condition><expr><name>b</name></expr></condition> <else>else <expr><call><name>call_two</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></lambda></expr></argument>,
        <argument><expr><name>c</name></expr></argument>,
    )</argument_list></call></expr></expr_stmt>
</block_content></block></if></if_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>sample</name><parameter_list>(<parameter><name>a</name></parameter>, <parameter><name>b</name></parameter>, <parameter><name>c</name></parameter>, <parameter><name>d</name></parameter>)</parameter_list><block>:<block_content>
    <if_stmt><if>if <condition><expr><name>a</name></expr></condition><block>:<block_content>
        <return>return <expr><call><name><name>a</name><operator>.</operator><name>call_one</name></name><argument_list>(
            <argument><expr><name>b</name></expr></argument>,
            <argument><expr><call><name>call_two</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="boolean">True</literal></expr></argument>)</argument_list></call> <ternary>if <condition><expr><name>d</name></expr></condition> <else>else <expr><call><name>call_two</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="boolean">False</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
        )</argument_list></call></expr></return>
</block_content></block></if></if_stmt></block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<try>try<block>:<block_content>
    <throw>raise <expr><name>ValueError</name></expr></throw>
</block_content></block><catch>except <expr><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> <alias>as <expr><name>e</name></expr></alias><block>:<block_content>
    <throw>raise <expr><name>IndexError</name></expr> <from>from <expr><call><call><name>call_two</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></from></throw>
</block_content></block></catch></try>
</unit>

<unit revision="1.0.0" language="Python">
<try>try<block>:<block_content>
    <throw>raise <expr><name>ValueError</name></expr></throw>
</block_content></block><catch>except <alias><expr><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <name>e</name></alias><block>:<block_content>
    <throw>raise <expr><name>IndexError</name></expr> <from>from <expr><call><call><name>call_two</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></from></throw>
</block_content></block></catch></try>
</unit>

<unit revision="1.0.0" language="Python">
<for>for <control><expr><name>a</name></expr> <range>in <expr><call><call><name>call_one</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></range></control><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></for>
</unit>

<unit revision="1.0.0" language="Python">
<for><specifier>async</specifier> for <control><expr><name>a</name></expr> <range>in <expr><call><call><name>call_one</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></range></control><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></for>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>call_parameter_annotation</name><parameter_list>(<parameter><name>a</name></parameter>, <parameter><name>b</name><annotation>: <expr><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></annotation></parameter>, <parameter><name>c</name></parameter>)</parameter_list><block>:<block_content>
    <pass>pass</pass>
</block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>call_parameter_init</name><parameter_list>(<parameter><name>a</name></parameter>, <parameter><name>b</name><init>=<expr><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></parameter>, <parameter><name>c</name></parameter>)</parameter_list><block>:<block_content>
    <pass>pass</pass>
</block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<function><attribute>@<expr><call><name>example</name><argument_list>(<argument><name>x</name> = <expr><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></attribute>
def <name>call_function</name><parameter_list>(<parameter><name>a</name></parameter>, <parameter><name>b</name></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><call><call><name>call_one</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></return>
</block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<class>class <name>CallSuper</name><super_list>(<super><expr><name>A</name></expr></super>, <super><expr><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></super>, <super><expr><name>B</name></expr></super>)</super_list><block>:<block_content>
    <pass>pass</pass>
</block_content></block></class>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>call_comprehension</name> <operator>=</operator> <operator>(</operator><name>a</name> <comprehension><for>for <control><expr><name>a</name></expr> <range>in <expr><call><call><name>call_one</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></range></control></for></comprehension><operator>)</operator></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>call_comprehension_if</name> <operator>=</operator> <operator>(</operator>
    <name>a</name>
    <comprehension><for>for <control><expr><name>a</name></expr> <range>in <expr><call><call><name>call_one</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></range></control></for>
    <if>if <condition><expr><call><call><name>call_two</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></condition></if></comprehension>
<operator>)</operator></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>call_list</name> <operator>=</operator> <array>[
    <expr><call><call><name>call_one</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>,
    <expr><name>c</name></expr>
]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>call_lambda</name> <operator>=</operator> <call><name>example</name><argument_list>(<argument><expr><array>[
    <expr><call><name>dict</name><argument_list>(
        <argument><name>a</name>=<expr><lambda>lambda <parameter><name>b</name></parameter>: <expr><call><call><name>call_one</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></lambda></expr></argument>
    )</argument_list></call></expr>,
    <expr><call><name>dict</name><argument_list>()</argument_list></call></expr>
]</array></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>call_set</name> <operator>=</operator> <set>{
    <expr><name>a</name></expr>,
    <expr><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
    <expr><name>b</name></expr>
}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>call_dictionary</name> <operator>=</operator> <dictionary>{
    <expr><literal type="string">"a"</literal></expr>: <expr><name>a</name></expr>,
    <expr><literal type="string">"b"</literal></expr>: <expr><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
    <expr><literal type="string">"c"</literal></expr>: <expr><name>c</name></expr>
}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>call_tuple</name> <operator>=</operator> <tuple>(
    <expr><name>a</name></expr>,
    <expr><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
    <expr><name>b</name></expr>
)</tuple></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><tuple><expr><name>no_paren</name></expr>, <expr><name>call_tuple</name></expr></tuple> <operator>=</operator> <tuple><expr><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><call><name>call_two</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></tuple></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>call_ternary</name> <operator>=</operator> <operator>(</operator><name>a</name> <ternary>if <condition><expr><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></condition> <else>else <expr><call><call><name>call_two</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>call_op_paren</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><call><call><name>call_one</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>call_one</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>call_one</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>call_one</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><call><name>call_two</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>call_one</name><argument_list>(<argument><expr><call><name>call_two</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></expr_stmt>
</unit>

</unit>
