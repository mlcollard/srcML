<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" language="Python" url="try">

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><literal type="number">1</literal><operator>/</operator><literal type="number">0</literal></expr></expr_stmt>
</block_content></block><catch>except<block>:<block_content>
    <pass>pass</pass>
</block_content></block></catch></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><literal type="number">1</literal><operator>/</operator><literal type="number">0</literal></expr></expr_stmt>
</block_content></block><catch>except <expr><name>ZeroDivisionError</name></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><literal type="number">1</literal><operator>/</operator><literal type="number">0</literal></expr></expr_stmt>
</block_content></block><catch>except <expr><name><name>ZeroDivisionError</name> <alias>as <name>e</name></alias></name></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><literal type="number">1</literal><operator>/</operator><literal type="number">0</literal></expr></expr_stmt>
</block_content></block><catch>except <expr><name><name>ValueError</name> <alias>as <name>e</name></alias></name></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><catch>except <expr><name>NameError</name></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><catch>except<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"other"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><literal type="number">1</literal><operator>/</operator><literal type="number">0</literal></expr></expr_stmt>
</block_content></block><catch>except* <expr><name><name>NameError</name> <alias>as <name>e</name></alias></name></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><catch>except* <expr><name>ZeroDivisionError</name></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"* error"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch></try> 
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <pass>pass</pass>
</block_content></block><catch>except <expr><name>ZeroDivisionError</name></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">'error'</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><else>else<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">'try_else'</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></else></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <pass>pass</pass>
</block_content></block><catch>except <expr><name>ZeroDivisionError</name></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">'zero error'</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><catch>except<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"other error"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><else>else<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">'try_else'</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></else></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Valid"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block><finally>finally<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">'finally'</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></finally></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>/</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block><catch>except<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Error Caught"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><finally>finally<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">'finally'</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></finally></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Try"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block><catch>except<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Except"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><else>else<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Else"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></else><finally>finally<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Finally"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></finally></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Try"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block><catch>except <expr><name><name>NameError</name> <alias>as <name>e</name></alias></name></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Except Alias"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><catch>except <expr><name>ValueError</name></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Except Match"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><catch>except<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Except Generic"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><else>else<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Else"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></else><finally>finally<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Finally"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></finally></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><literal type="number">1</literal><operator>/</operator><literal type="number">0</literal></expr></expr_stmt>
</block_content></block><catch>except <expr><tuple>(<expr><name>ValueError</name></expr>, <expr><name>ZeroDivisionError</name></expr>)</tuple></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><literal type="number">1</literal><operator>/</operator><literal type="number">0</literal></expr></expr_stmt>
</block_content></block><catch>except <expr><tuple>(<expr><name>ValueError</name></expr>, <expr><name>ZeroDivisionError</name></expr>)</tuple> <alias>as <name>e</name></alias></expr><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch></try>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><literal type="number">1</literal><operator>/</operator><literal type="number">0</literal></expr></expr_stmt>
</block_content></block><catch>except <alias><expr><name>ZeroDivisionError</name></expr>, <name>e</name></alias><block>:<block_content>
    <print>print <expr><name>e</name></expr></print>
</block_content></block></catch></try>
</unit>

</unit>
