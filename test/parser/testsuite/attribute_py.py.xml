<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" language="Python" url="attribute">

<unit language="Python">
<class><attribute>@<expr><name>unique</name></expr></attribute>
class <name>Human</name><block>:<block_content>
    <pass>pass</pass></block_content></block></class>
</unit>

<unit language="Python">
<class><attribute>@<expr><call><name>operator</name><argument_list>()</argument_list></call></expr></attribute>
class <name>t_op</name><block>:<block_content>
    <pass>pass</pass></block_content></block></class>
</unit>

<unit language="Python">
<class><attribute>@<expr><name>operator</name></expr></attribute>
<attribute>@<expr><call><name>decorator_getter</name><argument_list>()</argument_list></call></expr></attribute>
class <name>d_op</name><block>:<block_content>
    <pass>pass</pass></block_content></block></class>
</unit>

<unit language="Python">
<class><attribute>@<expr><name>decorator1</name></expr></attribute>
<attribute>@<expr><name>decorator2</name></expr></attribute>
class <name>MyClass</name><block>:<block_content>
    <pass>pass</pass>
</block_content></block></class>
</unit>

<unit language="Python">
<class><attribute>@<expr><call><name>decorator1</name><argument_list>()</argument_list></call></expr></attribute>
<attribute>@<expr><call><name>decorator2</name><argument_list>()</argument_list></call></expr></attribute>
class <name>MyClass</name><block>:<block_content>
    <pass>pass</pass>
</block_content></block></class>
</unit>

<unit language="Python">
<class><attribute>@<expr><name>A</name> <operator>+</operator> <name>B</name></expr></attribute>
class <name>new_op</name><block>:<block_content>
    <pass>pass</pass></block_content></block></class>
</unit>

<unit language="Python">
<function><attribute>@<expr><name>print</name></expr></attribute>
def <name>func</name><parameter_list>()</parameter_list><block>:<block_content>
    <pass>pass</pass></block_content></block></function>
</unit>

<unit language="Python">
<function><attribute>@<expr><call><name>decorator_getter</name><argument_list>()</argument_list></call></expr></attribute>
def <name>new</name><parameter_list>()</parameter_list><block>:<block_content>
    <pass>pass</pass></block_content></block></function>
</unit>

<unit language="Python">
<function><attribute>@<expr><name>decorator1</name></expr></attribute>
<attribute>@<expr><name>decorator2</name></expr></attribute>
def <name>sum</name><parameter_list>(<parameter><name>a</name></parameter>, <parameter><name>b</name></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr></return>
</block_content></block></function>
</unit>

<unit language="Python">
<function><attribute>@<expr><call><name>decorator1</name><argument_list>()</argument_list></call></expr></attribute>
<attribute>@<expr><call><name>decorator2</name><argument_list>()</argument_list></call></expr></attribute>
def <name>sum</name><parameter_list>(<parameter><name>a</name></parameter>, <parameter><name>b</name></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr></return>
</block_content></block></function>
</unit>

<unit language="Python">
<function><attribute>@<expr><name>decorator</name></expr></attribute>
<specifier>async</specifier> def <name>sum</name><parameter_list>(<parameter><name>a</name></parameter>, <parameter><name>b</name></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr></return>
</block_content></block></function>
</unit>

</unit>
