<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" language="Python" url="parameter">

<unit language="Python">
<function>def <name>do_nothing</name><parameter_list>()</parameter_list><block>:<block_content>
    <pass>pass</pass>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>simple_print</name><parameter_list>(<parameter><name>val</name></parameter>)</parameter_list><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>printf</name><parameter_list>(<parameter><name>val</name></parameter>,<parameter><name>string</name></parameter>)</parameter_list><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><call><name><name>string</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>sum</name><parameter_list>(<parameter><name>a</name></parameter>, <parameter><name>b</name></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr></return>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>calc</name><parameter_list>(<parameter><name>x</name></parameter>, <parameter><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><name>x</name> <operator>+</operator> <name>y</name></expr></return>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>sum</name><parameter_list>(<parameter><name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></parameter>, <parameter><name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr></return>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>printf</name><parameter_list>(<parameter><name>val</name></parameter>,<parameter><name>string</name><annotation>: <expr><name>str</name></expr></annotation></parameter>)</parameter_list><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><call><name><name>string</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>sumIntegers</name><parameter_list>(<parameter><name>a</name><annotation>: <expr><name>int</name></expr></annotation></parameter>, <parameter><name>b</name><annotation>: <expr><name>int</name></expr></annotation></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr></return>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>invert</name><parameter_list>(<parameter><name>val</name><annotation>: <expr><name>int</name></expr></annotation> <init>= <expr><literal type="number">0</literal></expr></init></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><operator>~</operator><name>val</name></expr></return>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>sumIntegers</name><parameter_list>(<parameter><name>a</name><annotation>: <expr><name>int</name></expr></annotation> <init>= <expr><literal type="number">0</literal></expr></init></parameter>, <parameter><name>b</name><annotation>: <expr><name>int</name></expr></annotation> <init>= <expr><literal type="number">0</literal></expr></init></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr></return>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>pos_function</name><parameter_list>(<parameter><name>x</name></parameter>, <parameter type="modifier">*</parameter>, <parameter><name>y</name></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><name>x</name> <operator>-</operator> <name>y</name></expr></return>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>key_function</name><parameter_list>(<parameter><name>x</name></parameter>, <parameter><name>y</name></parameter>, <parameter type="modifier">/</parameter>, <parameter><name>z</name></parameter>)</parameter_list><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>z</name><operator>*</operator><operator>(</operator><name>x</name><operator>+</operator><name>y</name><operator>)</operator></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>arg_test</name><parameter_list>(<parameter type="args">*<name>args</name></parameter>)</parameter_list><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>add</name><parameter_list>(<parameter type="args">*<name>b</name><annotation>: <expr><name>int</name></expr></annotation></parameter>)</parameter_list><block>:<block_content>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr></expr_stmt>
    <for>for <control><name>i</name> <range>in <expr><name>b</name></expr></range></control><block>:<block_content>
         <expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>+</operator> <name>i</name></expr></expr_stmt>
</block_content></block></for>    <return>return <expr><name>result</name></expr></return>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>kwarg_test</name><parameter_list>(<parameter type="kwargs">**<name>kwargs</name></parameter>)</parameter_list><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>kwargs</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>add</name><parameter_list>(<parameter type="kwargs">**<name>a</name><annotation>: <expr><name>int</name></expr></annotation></parameter>)</parameter_list><block>:<block_content>
    <for>for <control><name>i</name> <range>in <expr><call><name><name>a</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call></expr></range></control><block>:<block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></for></block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>hinting</name><parameter_list>(<parameter type="args">*<name>args</name><annotation>: <expr><name>list</name></expr></annotation></parameter>, <parameter type="kwargs">**<name>kwargs</name><annotation>: <expr><name>dict</name></expr></annotation></parameter>)</parameter_list><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>args</name></expr></argument>,<argument><expr><name>kwargs</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>all</name><parameter_list>(<parameter><name>x</name></parameter>, <parameter type="modifier">/</parameter>, <parameter><name>y</name></parameter>, <parameter type="modifier">*</parameter>, <parameter><name>z</name></parameter>)</parameter_list><block>:<block_content>
    <pass>pass</pass>
</block_content></block></function>
</unit>

<unit language="Python">
<expr_stmt><expr><lambda>lambda <parameter><name>x</name></parameter>, <parameter><name>y</name></parameter> <block>:<block_content> <expr><name>x</name> <operator>+</operator> <name>y</name></expr></block_content></block></lambda></expr></expr_stmt>
</unit>

<unit language="Python">
<function>def <name>numberGenerator</name><parameter_list>(<parameter><name>number_range</name><annotation>: <expr><name>int</name></expr></annotation></parameter>)</parameter_list><block>:<block_content>
    <for>for <control><name>i</name> <range>in <expr><call><name>range</name><argument_list>(<argument><expr><name>number_range</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></range></control><block>:<block_content>
        <yield>yield <expr><name>i</name></expr></yield>
</block_content></block></for></block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>loudNumberGenerator</name><parameter_list>(<parameter><name>number_range</name><annotation>: <expr><name>int</name></expr></annotation></parameter>)</parameter_list><block>:<block_content>
    <expr_stmt><expr><name>normal_number_generator</name> <operator>=</operator> <call><name>numberGenerator</name><argument_list>(<argument><name>number_range</name>=<expr><name>number_range</name></expr></argument>)</argument_list></call></expr></expr_stmt>
    <while>while <condition><expr><literal type="boolean">True</literal></expr></condition><block>:<block_content>
        <yield type="from">yield from <expr><name>normal_number_generator</name></expr></yield>
</block_content></block></while></block_content></block></function>
</unit>

<unit language="Python">
<function>def <name>max</name><parameter_list type="generic">[<parameter><name>T</name></parameter>]</parameter_list><parameter_list>(<parameter><name>args</name><annotation>: <expr><name><name>Iterable</name><index>[<expr><name>T</name></expr>]</index></name></expr></annotation></parameter>)</parameter_list> <annotation>-&gt; <expr><name>T</name></expr></annotation><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"srcML"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function>
</unit>

</unit>
