<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="JavaScript" filename="context_sensitive_keyword.js" url="context_sensitive_keyword">

    <!--Unit 1-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj2</name> <init>= <expr><object>{
            <property><name>const</name>: <expr><expr><lambda type="arrow"><parameter_list>()</parameter_list> <operator>=&gt;</operator> <block>{<block_content>
                <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="string">"This is a method named 'yield'."</literal></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></lambda></expr></expr></property></object></expr></init></decl>;</decl_stmt>
        }
        }<empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name><name>obj2</name><operator>.</operator><name>const</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 2-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj2</name> <init>= <expr><object>{
            <property><name>yield</name>: <expr><expr><lambda type="arrow"><parameter_list>()</parameter_list> <operator>=&gt;</operator> <block>{<block_content>
                <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="string">"This is a method named 'yield'."</literal></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></lambda></expr></expr></property></object></expr></init></decl>;</decl_stmt>
        }
        }<empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name><name>obj2</name><operator>.</operator><name>yield</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 3-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj3</name> <init>= <expr><object>{
            <property><name>break</name>: <expr><literal type="string">"This is a property named 'break'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj3</name><operator>.</operator><name>break</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 4-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj3</name> <init>= <expr><object>{
            <property><name>catch</name>: <expr><literal type="string">"This is a property named 'break'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj3</name><operator>.</operator><name>catch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 5-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj3</name> <init>= <expr><object>{
            <property><name>continue</name>: <expr><literal type="string">"This is a property named 'break'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj3</name><operator>.</operator><name>continue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 6-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj3</name> <init>= <expr><object>{
            <property><name>default</name>: <expr><literal type="string">"This is a property named 'break'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj3</name><operator>.</operator><name>default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 7-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj3</name> <init>= <expr><object>{
            <property><name>do</name>: <expr><literal type="string">"This is a property named 'break'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj3</name><operator>.</operator><name>do</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 8-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj4</name> <init>= <expr><object>{
            <property><name>else</name>: <expr><literal type="string">"This is a property named 'else'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj4</name><operator>.</operator><name>else</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 9-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj5</name> <init>= <expr><object>{
            <property><name>export</name>: <expr><literal type="string">"This is a property named 'export'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj5</name><operator>.</operator><name>export</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 10-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj6</name> <init>= <expr><object>{
            <property><name>finally</name>: <expr><literal type="string">"This is a property named 'finally'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj6</name><operator>.</operator><name>finally</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 11-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj7</name> <init>= <expr><object>{
            <property><name>function</name>: <expr><literal type="string">"This is a property named 'function'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj7</name><operator>.</operator><name>function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 12-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj8</name> <init>= <expr><object>{
            <property><name>import</name>: <expr><literal type="string">"This is a property named 'import'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj8</name><operator>.</operator><name>import</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 13-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj9</name> <init>= <expr><object>{
            <property><name>in</name>: <expr><literal type="string">"This is a property named 'in'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj9</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 14-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj10</name> <init>= <expr><object>{
            <property><name>super</name>: <expr><literal type="string">"This is a property named 'super'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj10</name><operator>.</operator><name>super</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 15-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj11</name> <init>= <expr><object>{
            <property><name>switch</name>: <expr><literal type="string">"This is a property named 'switch'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj11</name><operator>.</operator><name>switch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 16-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj12</name> <init>= <expr><object>{
            <property><name>this</name>: <expr><literal type="string">"This is a property named 'this'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj12</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 17-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj13</name> <init>= <expr><object>{
            <property><name>try</name>: <expr><literal type="string">"This is a property named 'try'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj13</name><operator>.</operator><name>try</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 18-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj14</name> <init>= <expr><object>{
            <property><name>with</name>: <expr><literal type="string">"This is a property named 'with'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj14</name><operator>.</operator><name>with</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 19-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj15</name> <init>= <expr><object>{
            <property><name>debugger</name>: <expr><literal type="string">"This is a property named 'debugger'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj15</name><operator>.</operator><name>debugger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 20-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj16</name> <init>= <expr><object>{
            <property><name>var</name>: <expr><literal type="string">"This is a property named 'var'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj16</name><operator>.</operator><name>var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 21-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj17</name> <init>= <expr><object>{
            <property><name>let</name>: <expr><literal type="string">"This is a property named 'let'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj17</name><operator>.</operator><name>let</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 22-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj18</name> <init>= <expr><object>{
            <property><name>if</name>: <expr><literal type="string">"This is a property named 'if'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj18</name><operator>.</operator><name>if</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 23-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj19</name> <init>= <expr><object>{
            <property><name>for</name>: <expr><literal type="string">"This is a property named 'for'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj19</name><operator>.</operator><name>for</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 24-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj20</name> <init>= <expr><object>{
            <property><name>while</name>: <expr><literal type="string">"This is a property named 'while'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj20</name><operator>.</operator><name>while</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 25-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj21</name> <init>= <expr><object>{
            <property><name>delete</name>: <expr><literal type="string">"This is a property named 'delete'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj21</name><operator>.</operator><name>delete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 26-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj22</name> <init>= <expr><object>{
            <property><name>return</name>: <expr><literal type="string">"This is a property named 'return'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj22</name><operator>.</operator><name>return</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 27-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj23</name> <init>= <expr><object>{
            <property><name>throw</name>: <expr><literal type="string">"This is a property named 'throw'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj23</name><operator>.</operator><name>throw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 28-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj24</name> <init>= <expr><object>{
            <property><name>typeof</name>: <expr><literal type="string">"This is a property named 'typeof'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj24</name><operator>.</operator><name>typeof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 29-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj25</name> <init>= <expr><object>{
            <property><name>void</name>: <expr><literal type="string">"This is a property named 'void'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj25</name><operator>.</operator><name>void</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 30-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj26</name> <init>= <expr><object>{
            <property><name>new</name>: <expr><literal type="string">"This is a property named 'new'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj26</name><operator>.</operator><name>new</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 31-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj27</name> <init>= <expr><object>{
            <property><name>instanceof</name>: <expr><literal type="string">"This is a property named 'instanceof'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj27</name><operator>.</operator><name>instanceof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 32-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj28</name> <init>= <expr><object>{
            <property><name>class</name>: <expr><literal type="string">"This is a property named 'class'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj28</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 33-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj29</name> <init>= <expr><object>{
            <property><name>extends</name>: <expr><literal type="string">"This is a property named 'extends'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj29</name><operator>.</operator><name>extends</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 34-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj30</name> <init>= <expr><object>{
            <property><name>static</name>: <expr><literal type="string">"This is a property named 'static'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj30</name><operator>.</operator><name>static</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 35-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj31</name> <init>= <expr><object>{
            <property><name>await</name>: <expr><literal type="string">"This is a property named 'await'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj31</name><operator>.</operator><name>await</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 36-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj32</name> <init>= <expr><object>{
            <property><name>enum</name>: <expr><literal type="string">"This is a property named 'enum'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj32</name><operator>.</operator><name>enum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 37-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj33</name> <init>= <expr><object>{
            <property><name>await</name>: <expr><literal type="string">"This is a property named 'await'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj33</name><operator>.</operator><name>await</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 38-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj34</name> <init>= <expr><object>{
            <property><name>implements</name>: <expr><literal type="string">"This is a property named 'implements'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj34</name><operator>.</operator><name>implements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 39-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj35</name> <init>= <expr><object>{
            <property><name>interface</name>: <expr><literal type="string">"This is a property named 'interface'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj35</name><operator>.</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 40-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj36</name> <init>= <expr><object>{
            <property><name>package</name>: <expr><literal type="string">"This is a property named 'package'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj36</name><operator>.</operator><name>package</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 41-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj37</name> <init>= <expr><object>{
            <property><name>private</name>: <expr><literal type="string">"This is a property named 'private'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj37</name><operator>.</operator><name>private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 42-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj38</name> <init>= <expr><object>{
            <property><name>protected</name>: <expr><literal type="string">"This is a property named 'protected'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj38</name><operator>.</operator><name>protected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 43-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>obj39</name> <init>= <expr><object>{
            <property><name>public</name>: <expr><literal type="string">"This is a property named 'public'."</literal></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>obj39</name><operator>.</operator><name>public</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 44-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>objectName</name> <init>= <expr><object>{
            <property><name>class</name>: <expr><lambda>function<parameter_list>(<parameter><decl><name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// method body</comment>
            </block_content>}</block></lambda></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj6</name><operator>.</operator><name>class</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 45-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>objectName</name> <init>= <expr><object>{
            <property><name>let</name>: <expr><lambda>function<parameter_list>(<parameter><decl><name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// method body</comment>
            </block_content>}</block></lambda></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj6</name><operator>.</operator><name>let</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 46-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>objectName</name> <init>= <expr><object>{
            <property><name>yield</name>: <expr><lambda>function<parameter_list>(<parameter><decl><name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// method body</comment>
            </block_content>}</block></lambda></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj6</name><operator>.</operator><name>yield</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </unit>

    <!--Unit 47-->
    <unit language="JavaScript">
        <decl_stmt><decl type="const">const <name>objectName</name> <init>= <expr><object>{
            <property><name>catch</name>: <expr><lambda>function<parameter_list>(<parameter><decl><name>parameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// method body</comment>
            </block_content>}</block></lambda></expr></property>
            }</object></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj6</name><operator>.</operator><name>catch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </unit>

</unit>
