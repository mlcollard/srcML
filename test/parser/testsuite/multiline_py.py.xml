<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Python" url="multiline">

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>print</name><argument_list>(
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
      <argument><expr><literal type="number">2</literal></expr></argument>,
      <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>print</name><argument_list>(
    <argument><expr><literal type="number">1</literal></expr></argument>,
    <argument><expr><literal type="number">2</literal></expr></argument>,
    <argument><expr><literal type="number">3</literal></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>print</name><argument_list>(
    <comment type="line"># Comment A</comment>
    <argument><expr><literal type="number">1</literal></expr></argument>,
    <comment type="hashbang">#! Comment B</comment>
    <argument><expr><literal type="number">2</literal></expr></argument>,
    <comment type="line"># Comment C</comment>
    <argument><expr><literal type="number">3</literal></expr></argument>
    <comment type="hashbang">#! Comment D</comment>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>print</name><argument_list>(
    <argument><expr><literal type="number">1</literal></expr></argument>,

    <argument><expr><literal type="number">2</literal></expr></argument>,


    <argument><expr><literal type="number">3</literal></expr></argument>



)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name><name>sample</name><index>[
    <expr><literal type="string">"a"</literal></expr>
]</index></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name><name>sample</name><index>[
    <expr><literal type="string">"a"</literal></expr>
]</index><index>[
    <expr><literal type="string">"b"</literal></expr>
]</index></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name>example</name><argument_list>(
    <argument><expr><call><name><name>sample</name><index>[
        <expr><literal type="string">"a"</literal></expr>
    ]</index></name><argument_list>(
        <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>
    )</argument_list></call></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><call><name><name>example</name><index>[
    <expr><literal type="string">"a"</literal></expr>
]</index></name><argument_list>(
    <argument><expr><call><name><name>sample</name><index>[
        <expr><literal type="string">"b"</literal></expr>
    ]</index></name><argument_list>(
        <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>
    )</argument_list></call></expr></argument>
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>a</name><argument_list>(
    <argument><expr><name>b</name></expr></argument>,
    <argument><expr><lambda>lambda <parameter><name>c</name></parameter>: <expr><call><name>d</name><argument_list>(
        <argument><expr><name>e</name></expr></argument>,
        <argument><expr><name>f</name></expr></argument>,
    )</argument_list></call></expr></lambda></expr></argument>,
    <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>g</name></expr></argument>,
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>a</name><argument_list>(
    <argument><expr><name>b</name></expr></argument>,
    <argument><expr><lambda>lambda <parameter><name>c</name></parameter>: <expr><call><name>d</name><argument_list>(
        <argument><expr><call><name>sample</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>sample</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
    )</argument_list></call></expr></lambda></expr></argument>,
    <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>g</name></expr></argument>,
)</argument_list></call></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>bar</name><parameter_list>()</parameter_list><block>:<block_content> <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
                 <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>bar</name><parameter_list>()</parameter_list><block>:<block_content> <expr_stmt><expr><call><name>print</name><argument_list>(
    <argument><expr><literal type="number">1</literal></expr></argument>,
    <argument><expr><literal type="number">2</literal></expr></argument>
)</argument_list></call></expr></expr_stmt></block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>bar</name><parameter_list>()</parameter_list><block>:<block_content> <expr_stmt><expr><call><name>print</name><argument_list>(
    <comment type="line"># Comment A</comment>
    <argument><expr><literal type="number">1</literal></expr></argument>,
    <comment type="hashbang">#! Comment B</comment>
    <argument><expr><literal type="number">2</literal></expr></argument>
    <comment type="line"># Comment C</comment>
)</argument_list></call></expr></expr_stmt></block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>sum</name><parameter_list>(<parameter><name>a</name></parameter>,
        <parameter><name>b</name></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator></expr></return>
</block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>sum</name><parameter_list>(<parameter><name>a</name></parameter>,
        <parameter><name>b</name></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><operator>(</operator>
        <name>a</name> <operator>+</operator> <name>b</name>
    <operator>)</operator></expr></return>
</block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>sum</name><parameter_list>(
    <parameter><name>a</name></parameter>,
    <parameter><name>b</name></parameter>
)</parameter_list><block>:<block_content>
    <return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator></expr></return>
</block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>sum</name><parameter_list>(
    <parameter><name>a</name></parameter>,
    <parameter><name>b</name></parameter>
)</parameter_list><block>:<block_content>
    <return>return <expr><operator>(</operator>
        <name>a</name>
        <operator>+</operator>
        <name>b</name>
    <operator>)</operator></expr></return>
</block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>sum</name><parameter_list>(
    <comment type="line"># Comment A</comment>
    <parameter><name>a</name></parameter>,
    <comment type="hashbang">#! Comment B</comment>
    <parameter><name>b</name></parameter>
    <comment type="line"># Comment C</comment>
)</parameter_list><block>:<block_content>
    <return>return <expr><operator>(</operator>
        <comment type="hashbang">#! Comment D</comment>
        <name>a</name>
        <comment type="line"># Comment E</comment>
        <operator>+</operator>
        <comment type="hashbang">#! Comment F</comment>
        <name>b</name>
        <comment type="line"># Comment G</comment>
    <operator>)</operator></expr></return>
</block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>array</name> <operator>=</operator> <array>[<expr><literal type="number">1</literal></expr>,
         <expr><literal type="number">2</literal></expr>,
         <expr><literal type="number">3</literal></expr>]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>array</name> <operator>=</operator> <array>[
    <expr><literal type="number">1</literal></expr>,
    <expr><literal type="number">2</literal></expr>,
    <expr><literal type="number">3</literal></expr>
]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>array</name> <operator>=</operator> <array>[
    <comment type="line"># Comment A</comment>
    <expr><literal type="number">1</literal></expr>,
    <comment type="hashbang">#! Comment B</comment>
    <expr><literal type="number">2</literal></expr>,
    <comment type="line"># Comment C</comment>
    <expr><literal type="number">3</literal></expr>
    <comment type="hashbang">#! Comment D</comment>
]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>dictionary</name> <operator>=</operator> <dictionary>{<expr><literal type="string">"a"</literal></expr>: <expr><literal type="number">1</literal></expr>,
              <expr><literal type="string">"b"</literal></expr>: <expr><literal type="number">2</literal></expr>,
              <expr><literal type="string">"c"</literal></expr>: <expr><literal type="number">3</literal></expr>}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>dictionary</name> <operator>=</operator> <dictionary>{
    <expr><literal type="string">"a"</literal></expr>: <expr><literal type="number">1</literal></expr>,
    <expr><literal type="string">"b"</literal></expr>: <expr><literal type="number">2</literal></expr>,
    <expr><literal type="string">"c"</literal></expr>: <expr><literal type="number">3</literal></expr>
}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>dictionary</name> <operator>=</operator> <dictionary>{
    <comment type="line"># Comment A</comment>
    <expr><literal type="string">"a"</literal></expr>:
    <comment type="hashbang">#! Comment B</comment>
    <expr><literal type="number">1</literal></expr>,
    <comment type="line"># Comment C</comment>
    <expr><literal type="string">"b"</literal></expr>:
    <comment type="hashbang">#! Comment D</comment>
    <expr><literal type="number">2</literal></expr>,
    <comment type="line"># Comment E</comment>
    <expr><literal type="string">"c"</literal></expr>:
    <comment type="hashbang">#! Comment F</comment>
    <expr><literal type="number">3</literal></expr>
    <comment type="line"># Comment G</comment>
}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>set_py</name> <operator>=</operator> <set>{<expr><literal type="number">1</literal></expr>,
          <expr><literal type="number">2</literal></expr>,
          <expr><literal type="number">3</literal></expr>}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>set_py</name> <operator>=</operator> <set>{
    <expr><literal type="number">1</literal></expr>,
    <expr><literal type="number">2</literal></expr>,
    <expr><literal type="number">3</literal></expr>
}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>set_py</name> <operator>=</operator> <set>{
    <comment type="line"># Comment A</comment>
    <expr><literal type="number">1</literal></expr>,
    <comment type="hashbang">#! Comment B</comment>
    <expr><literal type="number">2</literal></expr>,
    <comment type="line"># Comment C</comment>
    <expr><literal type="number">3</literal></expr>
    <comment type="hashbang">#! Comment D</comment>
}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>tuple_py</name> <operator>=</operator> <tuple>(<expr><literal type="number">1</literal></expr>,
            <expr><literal type="number">2</literal></expr>,
            <expr><literal type="number">3</literal></expr>)</tuple></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>tuple_py</name> <operator>=</operator> <tuple>(
    <expr><literal type="number">1</literal></expr>,
    <expr><literal type="number">2</literal></expr>,
    <expr><literal type="number">3</literal></expr>
)</tuple></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>tuple_py</name> <operator>=</operator> <tuple>(
    <comment type="line"># Comment A</comment>
    <expr><literal type="number">1</literal></expr>,
    <comment type="hashbang">#! Comment B</comment>
    <expr><literal type="number">2</literal></expr>,
    <comment type="line"># Comment C</comment>
    <expr><literal type="number">3</literal></expr>
    <comment type="hashbang">#! Comment D</comment>
)</tuple></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>operator</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator>
            <literal type="number">2</literal><operator>)</operator></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>operator</name> <operator>=</operator> <operator>(</operator>
    <literal type="number">1</literal>
    <operator>+</operator>
    <literal type="number">2</literal>
<operator>)</operator></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>operator</name> <operator>=</operator> <operator>(</operator>
    <comment type="line"># Comment A</comment>
    <literal type="number">1</literal>
    <comment type="hashbang">#! Comment B</comment>
    <operator>+</operator>
    <comment type="line"># Comment C</comment>
    <literal type="number">2</literal>
    <comment type="hashbang">#! Comment D</comment>
<operator>)</operator></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>sample</name><index>[<expr><literal type="number">0</literal>
               <operator>:</operator>
               <literal type="number">5</literal></expr>]</index></name></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>sample</name><index>[
    <expr><literal type="number">0</literal>
    <operator>:</operator>
    <literal type="number">5</literal></expr>
]</index></name></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>sample</name><index>[
    <comment type="line"># Comment A</comment>
    <expr><literal type="number">0</literal>
    <comment type="hashbang">#! Comment B</comment>
    <operator>:</operator>
    <comment type="line"># Comment C</comment>
    <literal type="number">5</literal></expr>
    <comment type="hashbang">#! Comment D</comment>
]</index></name></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>ternary</name> <operator>=</operator> <operator>(</operator>
    <literal type="string">"hello"</literal>
    <ternary>if
    <condition><expr><name>value</name></expr></condition>
    <else>else
    <expr><literal type="string">"goodbye"</literal></expr></else></ternary>
<operator>)</operator></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>ternary</name> <operator>=</operator> <operator>(</operator>
    <comment type="line"># Comment A</comment>
    <literal type="string">"hello"</literal>
    <comment type="hashbang">#! Comment B</comment>
    <ternary>if
    <comment type="line"># Comment C</comment>
    <condition><expr><name>value</name></expr></condition>
    <comment type="hashbang">#! Comment D</comment>
    <else>else
    <comment type="line"># Comment E</comment>
    <expr><literal type="string">"goodbye"</literal></expr></else></ternary>
    <comment type="hashbang">#! Comment F</comment>
<operator>)</operator></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>ternary</name> <operator>=</operator> <operator>(</operator>
    <literal type="number">1</literal>
    <ternary>if
    <condition><expr><literal type="number">2</literal></expr></condition>
    <else>else
    <expr><literal type="number">3</literal></expr></else></ternary>
<operator>)</operator> <ternary>if <condition><expr><literal type="number">4</literal></expr></condition> <else>else <expr><literal type="number">5</literal></expr></else></ternary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>ternary</name> <operator>=</operator> <operator>(</operator>
    <comment type="line"># Comment A</comment>
    <literal type="number">1</literal>
    <comment type="hashbang">#! Comment B</comment>
    <ternary>if
    <comment type="line"># Comment C</comment>
    <condition><expr><literal type="number">2</literal></expr></condition>
    <comment type="hashbang">#! Comment D</comment>
    <else>else
    <comment type="line"># Comment E</comment>
    <expr><literal type="number">3</literal></expr></else></ternary>
    <comment type="hashbang">#! Comment F</comment>
<operator>)</operator> <ternary>if <condition><expr><literal type="number">4</literal></expr></condition> <else>else <expr><literal type="number">5</literal></expr></else></ternary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>ternary</name> <operator>=</operator> <literal type="number">1</literal> <ternary>if <condition><expr><operator>(</operator>
    <literal type="number">2</literal>
    <ternary>if
    <condition><expr><literal type="number">3</literal></expr></condition>
    <else>else
    <expr><literal type="number">4</literal></expr></else></ternary>
<operator>)</operator></expr></condition> <else>else <expr><literal type="number">5</literal></expr></else></ternary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>ternary</name> <operator>=</operator> <literal type="number">1</literal> <ternary>if <condition><expr><operator>(</operator>
    <comment type="line"># Comment A</comment>
    <literal type="number">2</literal>
    <comment type="hashbang">#! Comment B</comment>
    <ternary>if
    <comment type="line"># Comment C</comment>
    <condition><expr><literal type="number">3</literal></expr></condition>
    <comment type="hashbang">#! Comment D</comment>
    <else>else
    <comment type="line"># Comment E</comment>
    <expr><literal type="number">4</literal></expr></else></ternary>
    <comment type="hashbang">#! Comment F</comment>
<operator>)</operator></expr></condition> <else>else <expr><literal type="number">5</literal></expr></else></ternary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>ternary</name> <operator>=</operator> <literal type="number">1</literal> <ternary>if <condition><expr><literal type="number">2</literal></expr></condition> <else>else <expr><operator>(</operator>
    <literal type="number">3</literal>
    <ternary>if
    <condition><expr><literal type="number">4</literal></expr></condition>
    <else>else
    <expr><literal type="number">5</literal></expr></else></ternary>
<operator>)</operator></expr></else></ternary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>ternary</name> <operator>=</operator> <literal type="number">1</literal> <ternary>if <condition><expr><literal type="number">2</literal></expr></condition> <else>else <expr><operator>(</operator>
    <comment type="line"># Comment A</comment>
    <literal type="number">3</literal>
    <comment type="hashbang">#! Comment B</comment>
    <ternary>if
    <comment type="line"># Comment C</comment>
    <condition><expr><literal type="number">4</literal></expr></condition>
    <comment type="hashbang">#! Comment D</comment>
    <else>else
    <comment type="line"># Comment E</comment>
    <expr><literal type="number">5</literal></expr></else></ternary>
    <comment type="hashbang">#! Comment F</comment>
<operator>)</operator></expr></else></ternary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <array>[
    <expr><name>x</name></expr>
    <comprehension><for>for
    <control><expr><name>x</name></expr>
    <range>in
    <expr><call><name>range</name><argument_list>(
        <argument><expr><literal type="number">10</literal></expr></argument>
    )</argument_list></call></expr></range></control></for></comprehension>
]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <array>[
    <comment type="line"># Comment A</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment B</comment>
    <comprehension><for>for
    <comment type="line"># Comment C</comment>
    <control><expr><name>x</name></expr>
    <comment type="hashbang">#! Comment D</comment>
    <range>in
    <comment type="line"># Comment E</comment>
    <expr><call><name>range</name><argument_list>(
        <comment type="hashbang">#! Comment F</comment>
        <argument><expr><literal type="number">10</literal></expr></argument>
        <comment type="line"># Comment G</comment>
    )</argument_list></call></expr></range></control></for></comprehension>
    <comment type="hashbang">#! Comment H</comment>
]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <array>[
    <expr><name>x</name></expr>
    <comprehension><for>for
    <control><expr><name>x</name></expr>
    <range>in
    <expr><call><name>range</name><argument_list>(
        <argument><expr><literal type="number">10</literal></expr></argument>
    )</argument_list></call></expr></range></control></for>
    <if>if
    <condition><expr><name>x</name>
    <operator>%</operator>
    <literal type="number">2</literal>
    <operator>==</operator>
    <literal type="number">0</literal></expr></condition></if></comprehension>
]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <array>[
    <comment type="line"># Comment A</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment B</comment>
    <comprehension><for>for
    <comment type="line"># Comment C</comment>
    <control><expr><name>x</name></expr>
    <comment type="hashbang">#! Comment D</comment>
    <range>in
    <comment type="line"># Comment E</comment>
    <expr><call><name>range</name><argument_list>(
        <comment type="hashbang">#! Comment F</comment>
        <argument><expr><literal type="number">10</literal></expr></argument>
        <comment type="line"># Comment G</comment>
    )</argument_list></call></expr></range></control></for>
    <comment type="hashbang">#! Comment H</comment>
    <if>if
    <comment type="line"># Comment I</comment>
    <condition><expr><name>x</name>
    <comment type="hashbang">#! Comment J</comment>
    <operator>%</operator>
    <comment type="line"># Comment K</comment>
    <literal type="number">2</literal>
    <comment type="hashbang">#! Comment L</comment>
    <operator>==</operator>
    <comment type="line"># Comment M</comment>
    <literal type="number">0</literal></expr></condition></if></comprehension>
    <comment type="hashbang">#! Comment N</comment>
]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <array>[
    <expr><name>x</name></expr>
    <comprehension><for>for
    <control><expr><name>x</name></expr>
    <range>in
    <expr><call><name>range</name><argument_list>(
        <argument><expr><literal type="number">10</literal></expr></argument>
    )</argument_list></call></expr></range></control></for>
    <if>if
    <condition><expr><name>x</name>
    <operator>%</operator>
    <literal type="number">2</literal>
    <operator>==</operator>
    <literal type="number">0</literal></expr></condition></if>
    <if>if
    <condition><expr><name>x</name>
    <operator>&gt;</operator>
    <literal type="number">0</literal></expr></condition></if></comprehension>
]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <array>[
    <comment type="line"># Comment A</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment B</comment>
    <comprehension><for>for
    <comment type="line"># Comment C</comment>
    <control><expr><name>x</name></expr>
    <comment type="hashbang">#! Comment D</comment>
    <range>in
    <comment type="line"># Comment E</comment>
    <expr><call><name>range</name><argument_list>(
        <comment type="hashbang">#! Comment F</comment>
        <argument><expr><literal type="number">10</literal></expr></argument>
        <comment type="line"># Comment G</comment>
    )</argument_list></call></expr></range></control></for>
    <comment type="hashbang">#! Comment H</comment>
    <if>if
    <comment type="line"># Comment I</comment>
    <condition><expr><name>x</name>
    <comment type="hashbang">#! Comment J</comment>
    <operator>%</operator>
    <comment type="line"># Comment K</comment>
    <literal type="number">2</literal>
    <comment type="hashbang">#! Comment L</comment>
    <operator>==</operator>
    <comment type="line"># Comment M</comment>
    <literal type="number">0</literal></expr></condition></if>
    <comment type="hashbang">#! Comment N</comment>
    <if>if
    <comment type="line"># Comment O</comment>
    <condition><expr><name>x</name>
    <comment type="hashbang">#! Comment P</comment>
    <operator>&gt;</operator>
    <comment type="line"># Comment Q</comment>
    <literal type="number">0</literal></expr></condition></if></comprehension>
    <comment type="hashbang">#! Comment R</comment>
]</array></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <set>{
    <expr><name>x</name></expr>
    <comprehension><for>for
    <control><expr><name>x</name></expr>
    <range>in
    <expr><call><name>range</name><argument_list>(
        <argument><expr><literal type="number">10</literal></expr></argument>
    )</argument_list></call></expr></range></control></for></comprehension>
}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <set>{
    <comment type="line"># Comment A</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment B</comment>
    <comprehension><for>for
    <comment type="line"># Comment C</comment>
    <control><expr><name>x</name></expr>
    <comment type="hashbang">#! Comment D</comment>
    <range>in
    <comment type="line"># Comment E</comment>
    <expr><call><name>range</name><argument_list>(
        <comment type="hashbang">#! Comment F</comment>
        <argument><expr><literal type="number">10</literal></expr></argument>
        <comment type="line"># Comment G</comment>
    )</argument_list></call></expr></range></control></for></comprehension>
    <comment type="hashbang">#! Comment H</comment>
}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <set>{
    <expr><name>x</name></expr>
    <comprehension><for>for
    <control><expr><name>x</name></expr>
    <range>in
    <expr><call><name>range</name><argument_list>(
        <argument><expr><literal type="number">10</literal></expr></argument>
    )</argument_list></call></expr></range></control></for>
    <if>if
    <condition><expr><name>x</name>
    <operator>%</operator>
    <literal type="number">2</literal>
    <operator>==</operator>
    <literal type="number">0</literal></expr></condition></if></comprehension>
}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <set>{
    <comment type="line"># Comment A</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment B</comment>
    <comprehension><for>for
    <comment type="line"># Comment C</comment>
    <control><expr><name>x</name></expr>
    <comment type="hashbang">#! Comment D</comment>
    <range>in
    <comment type="line"># Comment E</comment>
    <expr><call><name>range</name><argument_list>(
        <comment type="hashbang">#! Comment F</comment>
        <argument><expr><literal type="number">10</literal></expr></argument>
        <comment type="line"># Comment G</comment>
    )</argument_list></call></expr></range></control></for>
    <comment type="hashbang">#! Comment H</comment>
    <if>if
    <comment type="line"># Comment I</comment>
    <condition><expr><name>x</name>
    <comment type="hashbang">#! Comment J</comment>
    <operator>%</operator>
    <comment type="line"># Comment K</comment>
    <literal type="number">2</literal>
    <comment type="hashbang">#! Comment L</comment>
    <operator>==</operator>
    <comment type="line"># Comment M</comment>
    <literal type="number">0</literal></expr></condition></if></comprehension>
    <comment type="hashbang">#! Comment N</comment>
}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <set>{
    <expr><name>x</name></expr>
    <comprehension><for>for
    <control><expr><name>x</name></expr>
    <range>in
    <expr><call><name>range</name><argument_list>(
        <argument><expr><literal type="number">10</literal></expr></argument>
    )</argument_list></call></expr></range></control></for>
    <if>if
    <condition><expr><name>x</name>
    <operator>%</operator>
    <literal type="number">2</literal>
    <operator>==</operator>
    <literal type="number">0</literal></expr></condition></if>
    <if>if
    <condition><expr><name>x</name>
    <operator>&gt;</operator>
    <literal type="number">0</literal></expr></condition></if></comprehension>
}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <set>{
    <comment type="line"># Comment A</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment B</comment>
    <comprehension><for>for
    <comment type="line"># Comment C</comment>
    <control><expr><name>x</name></expr>
    <comment type="hashbang">#! Comment D</comment>
    <range>in
    <comment type="line"># Comment E</comment>
    <expr><call><name>range</name><argument_list>(
        <comment type="hashbang">#! Comment F</comment>
        <argument><expr><literal type="number">10</literal></expr></argument>
        <comment type="line"># Comment G</comment>
    )</argument_list></call></expr></range></control></for>
    <comment type="hashbang">#! Comment H</comment>
    <if>if
    <comment type="line"># Comment I</comment>
    <condition><expr><name>x</name>
    <comment type="hashbang">#! Comment J</comment>
    <operator>%</operator>
    <comment type="line"># Comment K</comment>
    <literal type="number">2</literal>
    <comment type="hashbang">#! Comment L</comment>
    <operator>==</operator>
    <comment type="line"># Comment M</comment>
    <literal type="number">0</literal></expr></condition></if>
    <comment type="hashbang">#! Comment N</comment>
    <if>if
    <comment type="line"># Comment O</comment>
    <condition><expr><name>x</name>
    <comment type="hashbang">#! Comment P</comment>
    <operator>&gt;</operator>
    <comment type="line"># Comment Q</comment>
    <literal type="number">0</literal></expr></condition></if></comprehension>
    <comment type="hashbang">#! Comment R</comment>
}</set></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <dictionary>{
    <expr><name>x</name></expr>
    :
    <expr><name>x</name></expr>
    <comprehension><for>for
    <control><expr><name>x</name></expr>
    <range>in
    <expr><call><name>range</name><argument_list>(
        <argument><expr><literal type="number">10</literal></expr></argument>
    )</argument_list></call></expr></range></control></for></comprehension>
}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <dictionary>{
    <comment type="line"># Comment A</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment B</comment>
    :
    <comment type="line"># Comment C</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment D</comment>
    <comprehension><for>for
    <comment type="line"># Comment E</comment>
    <control><expr><name>x</name></expr>
    <comment type="hashbang">#! Comment F</comment>
    <range>in
    <comment type="line"># Comment G</comment>
    <expr><call><name>range</name><argument_list>(
        <comment type="hashbang">#! Comment H</comment>
        <argument><expr><literal type="number">10</literal></expr></argument>
        <comment type="line"># Comment I</comment>
    )</argument_list></call></expr></range></control></for></comprehension>
    <comment type="hashbang">#! Comment J</comment>
}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <dictionary>{
    <expr><name>x</name></expr>
    :
    <expr><name>x</name></expr>
    <comprehension><for>for
    <control><expr><name>x</name></expr>
    <range>in
    <expr><call><name>range</name><argument_list>(
        <argument><expr><literal type="number">10</literal></expr></argument>
    )</argument_list></call></expr></range></control></for>
    <if>if
    <condition><expr><name>x</name>
    <operator>%</operator>
    <literal type="number">2</literal>
    <operator>==</operator>
    <literal type="number">0</literal></expr></condition></if></comprehension>
}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <dictionary>{
    <comment type="line"># Comment A</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment B</comment>
    :
    <comment type="line"># Comment C</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment D</comment>
    <comprehension><for>for
    <comment type="line"># Comment E</comment>
    <control><expr><name>x</name></expr>
    <comment type="hashbang">#! Comment F</comment>
    <range>in
    <comment type="line"># Comment G</comment>
    <expr><call><name>range</name><argument_list>(
        <comment type="hashbang">#! Comment H</comment>
        <argument><expr><literal type="number">10</literal></expr></argument>
        <comment type="line"># Comment I</comment>
    )</argument_list></call></expr></range></control></for>
    <comment type="hashbang">#! Comment J</comment>
    <if>if
    <comment type="line"># Comment K</comment>
    <condition><expr><name>x</name>
    <comment type="hashbang">#! Comment L</comment>
    <operator>%</operator>
    <comment type="line"># Comment M</comment>
    <literal type="number">2</literal>
    <comment type="hashbang">#! Comment N</comment>
    <operator>==</operator>
    <comment type="line"># Comment O</comment>
    <literal type="number">0</literal></expr></condition></if></comprehension>
    <comment type="hashbang">#! Comment P</comment>
}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <dictionary>{
    <expr><name>x</name></expr>
    :
    <expr><name>x</name></expr>
    <comprehension><for>for
    <control><expr><name>x</name></expr>
    <range>in
    <expr><call><name>range</name><argument_list>(
        <argument><expr><literal type="number">10</literal></expr></argument>
    )</argument_list></call></expr></range></control></for>
    <if>if
    <condition><expr><name>x</name>
    <operator>%</operator>
    <literal type="number">2</literal>
    <operator>==</operator>
    <literal type="number">0</literal></expr></condition></if>
    <if>if
    <condition><expr><name>x</name>
    <operator>&gt;</operator>
    <literal type="number">0</literal></expr></condition></if></comprehension>
}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>list_comp</name> <operator>=</operator> <dictionary>{
    <comment type="line"># Comment A</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment B</comment>
    :
    <comment type="line"># Comment C</comment>
    <expr><name>x</name></expr>
    <comment type="hashbang">#! Comment D</comment>
    <comprehension><for>for
    <comment type="line"># Comment E</comment>
    <control><expr><name>x</name></expr>
    <comment type="hashbang">#! Comment F</comment>
    <range>in
    <comment type="line"># Comment G</comment>
    <expr><call><name>range</name><argument_list>(
        <comment type="hashbang">#! Comment H</comment>
        <argument><expr><literal type="number">10</literal></expr></argument>
        <comment type="line"># Comment I</comment>
    )</argument_list></call></expr></range></control></for>
    <comment type="hashbang">#! Comment J</comment>
    <if>if
    <comment type="line"># Comment K</comment>
    <condition><expr><name>x</name>
    <comment type="hashbang">#! Comment L</comment>
    <operator>%</operator>
    <comment type="line"># Comment M</comment>
    <literal type="number">2</literal>
    <comment type="hashbang">#! Comment N</comment>
    <operator>==</operator>
    <comment type="line"># Comment O</comment>
    <literal type="number">0</literal></expr></condition></if>
    <comment type="hashbang">#! Comment P</comment>
    <if>if
    <comment type="line"># Comment Q</comment>
    <condition><expr><name>x</name>
    <comment type="hashbang">#! Comment R</comment>
    <operator>&gt;</operator>
    <comment type="line"># Comment S</comment>
    <literal type="number">0</literal></expr></condition></if></comprehension>
    <comment type="hashbang">#! Comment T</comment>
}</dictionary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<typedef>type <name><name>ListOrSet</name><parameter_list type="generic">[
    <parameter><name>T</name></parameter>
]</parameter_list></name> = <expr><name><name>list</name><index>[<expr><name>T</name></expr>]</index></name> <operator>|</operator> <name><name>set</name><index>[<expr><name>T</name></expr>]</index></name></expr></typedef>
</unit>

<unit revision="1.0.0" language="Python">
<typedef>type <name><name>ListOrSet</name><parameter_list type="generic">[
    <comment type="line"># Comment A</comment>
    <parameter><name>T</name></parameter>
    <comment type="hashbang">#! Comment B</comment>
]</parameter_list></name> = <expr><name><name>list</name><index>[<expr><name>T</name></expr>]</index></name> <operator>|</operator> <name><name>set</name><index>[<expr><name>T</name></expr>]</index></name></expr></typedef>
</unit>

<unit revision="1.0.0" language="Python">
<typedef>type <name><name>ListOrSet</name><parameter_list type="generic">[
    <parameter><name>T</name></parameter>,
    <parameter><name>U</name></parameter>
]</parameter_list></name> = <expr><name><name>list</name><index>[<expr><name>T</name></expr>]</index></name> <operator>|</operator> <name><name>set</name><index>[<expr><name>U</name></expr>]</index></name></expr></typedef>
</unit>

<unit revision="1.0.0" language="Python">
<typedef>type <name><name>ListOrSet</name><parameter_list type="generic">[
    <comment type="line"># Comment A</comment>
    <parameter><name>T</name></parameter>,
    <comment type="hashbang">#! Comment B</comment>
    <parameter><name>U</name></parameter>
    <comment type="line"># Comment C</comment>
]</parameter_list></name> = <expr><name><name>list</name><index>[<expr><name>T</name></expr>]</index></name> <operator>|</operator> <name><name>set</name><index>[<expr><name>U</name></expr>]</index></name></expr></typedef>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name><name>max</name><parameter_list type="generic">[
    <parameter><name>T</name></parameter>,
    <parameter><name>U</name></parameter>
]</parameter_list></name><parameter_list>(<parameter><name>args</name><annotation>: <expr><name><name>Iterable</name><index>[<expr><name>T</name></expr>]</index></name></expr></annotation></parameter>)</parameter_list> <annotation>-&gt; <expr><name>T</name></expr></annotation><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"srcML"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name><name>max</name><parameter_list type="generic">[
    <comment type="line"># Comment A</comment>
    <parameter><name>T</name></parameter>,
    <comment type="hashbang">#! Comment B</comment>
    <parameter><name>U</name></parameter>
    <comment type="line"># Comment C</comment>
]</parameter_list></name><parameter_list>(<parameter><name>args</name><annotation>: <expr><name><name>Iterable</name><index>[<expr><name>T</name></expr>]</index></name></expr></annotation></parameter>)</parameter_list> <annotation>-&gt; <expr><name>T</name></expr></annotation><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"srcML"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<class>class <name><name>list</name><parameter_list type="generic">[
    <parameter><name>T</name></parameter>,
    <parameter><name>U</name></parameter>
]</parameter_list></name><block>:<block_content>
    <function>def <name>sample</name><parameter_list>(<parameter><name>self</name></parameter>, <parameter><name>element</name><annotation>: <expr><name>T</name></expr></annotation></parameter>)</parameter_list> <annotation>-&gt; <expr><name>T</name></expr></annotation><block>:<block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"srcML"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function></block_content></block></class>
</unit>

<unit revision="1.0.0" language="Python">
<class>class <name><name>list</name><parameter_list type="generic">[
    <comment type="line"># Comment A</comment>
    <parameter><name>T</name></parameter>,
    <comment type="hashbang">#! Comment B</comment>
    <parameter><name>U</name></parameter>
    <comment type="line"># Comment C</comment>
]</parameter_list></name><block>:<block_content>
    <function>def <name>sample</name><parameter_list>(<parameter><name>self</name></parameter>, <parameter><name>element</name><annotation>: <expr><name>T</name></expr></annotation></parameter>)</parameter_list> <annotation>-&gt; <expr><name>T</name></expr></annotation><block>:<block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"srcML"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function></block_content></block></class>
</unit>

<unit revision="1.0.0" language="Python">
<class>class <name>Box</name><super_list>(
    <super><expr><name><name>Generic</name><index>[<expr><name>T</name></expr>]</index></name></expr></super>,
    <super><expr><name><name>Generic</name><index>[<expr><name>U</name></expr>]</index></name></expr></super>
)</super_list><block>:<block_content>
    <function>def <name>__init__</name><parameter_list>(<parameter><name>self</name></parameter>, <parameter><name>content</name><annotation>: <expr><name>T</name></expr></annotation></parameter>)</parameter_list> <annotation>-&gt; <expr><name>T</name></expr></annotation><block>:<block_content>
        <expr_stmt><expr><name><name>self</name><operator>.</operator><name>content</name></name> <operator>=</operator> <name>content</name></expr></expr_stmt>
</block_content></block></function></block_content></block></class>
</unit>

<unit revision="1.0.0" language="Python">
<class>class <name>Box</name><super_list>(
    <comment type="line"># Comment A</comment>
    <super><expr><name><name>Generic</name><index>[<expr><name>T</name></expr>]</index></name></expr></super>,
    <comment type="hashbang">#! Comment B</comment>
    <super><expr><name><name>Generic</name><index>[<expr><name>U</name></expr>]</index></name></expr></super>
    <comment type="line"># Comment C</comment>
)</super_list><block>:<block_content>
    <function>def <name>__init__</name><parameter_list>(<parameter><name>self</name></parameter>, <parameter><name>content</name><annotation>: <expr><name>T</name></expr></annotation></parameter>)</parameter_list> <annotation>-&gt; <expr><name>T</name></expr></annotation><block>:<block_content>
        <expr_stmt><expr><name><name>self</name><operator>.</operator><name>content</name></name> <operator>=</operator> <name>content</name></expr></expr_stmt>
</block_content></block></function></block_content></block></class>
</unit>

<unit revision="1.0.0" language="Python">
<class>class <name><name>Box</name><parameter_list type="generic">[
    <parameter><name>T</name></parameter>,
    <parameter><name>U</name></parameter>
]</parameter_list></name><super_list>(
    <super><expr><name><name>Generic</name><index>[<expr><name>T</name></expr>]</index></name></expr></super>,
    <super><expr><name><name>Generic</name><index>[<expr><name>U</name></expr>]</index></name></expr></super>
)</super_list><block>:<block_content>
    <function>def <name>__init__</name><parameter_list>(<parameter><name>self</name></parameter>, <parameter><name>content</name><annotation>: <expr><name>T</name></expr></annotation></parameter>)</parameter_list> <annotation>-&gt; <expr><name>T</name></expr></annotation><block>:<block_content>
        <expr_stmt><expr><name><name>self</name><operator>.</operator><name>content</name></name> <operator>=</operator> <name>content</name></expr></expr_stmt>
</block_content></block></function></block_content></block></class>
</unit>

<unit revision="1.0.0" language="Python">
<class>class <name><name>Box</name><parameter_list type="generic">[
    <comment type="line"># Comment A</comment>
    <parameter><name>T</name></parameter>,
    <comment type="hashbang">#! Comment B</comment>
    <parameter><name>U</name></parameter>
    <comment type="line"># Comment C</comment>
]</parameter_list></name><super_list>(
    <comment type="hashbang">#! Comment D</comment>
    <super><expr><name><name>Generic</name><index>[<expr><name>T</name></expr>]</index></name></expr></super>,
    <comment type="line"># Comment E</comment>
    <super><expr><name><name>Generic</name><index>[<expr><name>U</name></expr>]</index></name></expr></super>
    <comment type="hashbang">#! Comment F</comment>
)</super_list><block>:<block_content>
    <function>def <name>__init__</name><parameter_list>(<parameter><name>self</name></parameter>, <parameter><name>content</name><annotation>: <expr><name>T</name></expr></annotation></parameter>)</parameter_list> <annotation>-&gt; <expr><name>T</name></expr></annotation><block>:<block_content>
        <expr_stmt><expr><name><name>self</name><operator>.</operator><name>content</name></name> <operator>=</operator> <name>content</name></expr></expr_stmt>
</block_content></block></function></block_content></block></class>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>line_continuation</name> <operator>=</operator> <literal type="string">"Lorem ipsum dolor sit amet, \
consectetur adipiscing elit. Nullam condimentum \
ligula a lectus maximus mollis."</literal></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>line_continuation</name> <operator>=</operator> <name>a</name> <operator>+</operator> \
                    <name>b</name> <operator>-</operator> \
                    <name>c</name> <operator>*</operator> \
                    <name>d</name> <operator>/</operator> \
                    <name>e</name></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>example</name><parameter_list>(<parameter><name>self</name></parameter>)</parameter_list><block>:<block_content>
    <if_stmt><if>if <condition><expr><name>a</name></expr></condition><block>:<block_content>
        <return>return <expr><tuple><expr><name>b</name></expr>, <expr><literal type="string">'(c: %s, d: %s)'</literal> <operator>%</operator> \
    <tuple>(<expr><name>c</name></expr>, <expr><name>d</name></expr>)</tuple></expr></tuple></expr></return>
</block_content></block></if></if_stmt></block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<function>def <name>example</name><parameter_list>(<parameter><name>self</name></parameter>)</parameter_list><block>:<block_content>
    <if_stmt><if>if <condition><expr><name>a</name></expr></condition><block>:<block_content>
        <return>return \
    <expr><tuple><expr><name>b</name></expr>, \
    <expr><literal type="string">'(c: %s, d: %s)'</literal> <operator>%</operator> \
    <tuple>(<expr><name>c</name></expr>, <expr><name>d</name></expr>)</tuple></expr></tuple></expr></return>
</block_content></block></if></if_stmt></block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<expr_stmt><expr><name>line_continuation</name> <operator>=</operator> <name>a</name> \
                    <ternary>if <condition><expr><name>b</name></expr></condition> \
                    <else>else <expr><name>c</name></expr></else></ternary></expr></expr_stmt>
</unit>

<unit revision="1.0.0" language="Python">
<assert>assert \
    <condition><expr><name>x</name> <operator>==</operator> \
    <name>y</name></expr></condition></assert>
</unit>

<unit revision="1.0.0" language="Python">
<assert>assert \
       \
       <condition><expr><literal type="number">4</literal>\
       \
       <operator>==</operator>\
       \
       <literal type="number">4</literal></expr></condition></assert>\
       \
       \


</unit>

<unit revision="1.0.0" language="Python">
<assert>assert \
       \
       <condition><expr><literal type="number">4</literal>\
       \
       <operator>==</operator>\
       \
       <literal type="number">4</literal>\
       \
       \
<operator>+</operator><literal type="number">0</literal></expr></condition></assert>

</unit>

<unit revision="1.0.0" language="Python">
<assert>assert \
       \
       <condition><expr><literal type="number">4</literal>\
       \
       <operator>==</operator>\
       \
       <literal type="number">4</literal></expr></condition></assert>\
       \
       \


<function>def <name>sum</name><parameter_list>(<parameter><name>a</name></parameter>, <parameter><name>b</name></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator></expr></return>
</block_content></block></function>
</unit>

<unit revision="1.0.0" language="Python">
<assert>assert \
       \
       <condition><expr><literal type="number">4</literal>\
       \
       <operator>==</operator>\
       \
       <literal type="number">4</literal>\
       \
       \
<operator>+</operator><literal type="number">0</literal></expr></condition></assert>

<function>def <name>sum</name><parameter_list>(<parameter><name>a</name></parameter>, <parameter><name>b</name></parameter>)</parameter_list><block>:<block_content>
    <return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator></expr></return>
</block_content></block></function>
</unit>

</unit>
