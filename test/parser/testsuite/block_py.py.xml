<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" language="Python" url="block">

<unit revision="1.1.0" language="Python">
<while>while <condition><expr><name>loop</name></expr></condition><block>:<block_content>
    <expr_stmt><expr><name>loop</name> <operator>=</operator> <call><name>check_if_looping</name><argument_list>()</argument_list></call></expr></expr_stmt>
</block_content></block></while>
</unit>

<unit revision="1.1.0" language="Python">
<while>while <condition><expr><name>loop</name></expr></condition><block>:<block_content>
    <expr_stmt><expr><name>loop</name> <operator>=</operator> <call><name>check_if_looping</name><argument_list>()</argument_list></call></expr></expr_stmt>
</block_content></block><else>else<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Broke"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></else></while>
</unit>

<unit revision="1.1.0" language="Python">
<for>for <control><expr><name>value</name></expr> <range>in <expr><call><name>range</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></range></control><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></for>
</unit>


<unit revision="1.1.0" language="Python">
<for>for <control><expr><name>value</name></expr> <range>in <expr><call><name>range</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></range></control><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block><else>else<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Broke"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></else></for>
</unit>

<unit revision="1.1.0" language="Python">
<if_stmt><if>if <condition><expr><literal type="boolean">True</literal></expr></condition><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"If"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></if></if_stmt>
</unit>

<unit revision="1.1.0" language="Python">
<if_stmt><if>if <condition><expr><literal type="boolean">False</literal></expr></condition><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"If"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></if><if type="elseif">elif <condition><expr><literal type="boolean">True</literal></expr></condition><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Elif"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></if><else>else<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Else"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></else></if_stmt>
</unit>

<unit revision="1.1.0" language="Python">
<switch>match <condition><expr><name>number</name></expr></condition><block>:<block_content>
    <case>case <expr><literal type="number">1</literal></expr><block>:<block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"one"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></case>    <case>case <expr><name>_</name></expr><block>:<block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></case></block_content></block></switch>
</unit>

<unit revision="1.1.0" language="Python">
<with>with <expr><call><name>open</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>,<argument><expr><literal type="string">'w'</literal></expr></argument>)</argument_list></call></expr> <alias>as <expr><name>file</name></expr></alias><block>:<block_content>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"Hello World"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></with>
</unit>

<unit revision="1.1.0" language="Python">
<try>try<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Try"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block><catch>except<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Except"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></catch><else>else<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Else"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></else><finally>finally<block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Finally"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></finally></try>
</unit>

<unit revision="1.1.0" language="Python">
<function>def <name>printf</name><parameter_list>(<parameter><name>val</name></parameter>)</parameter_list><block>:<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">f"{val}"</literal></expr></argument>)</argument_list></call></expr></expr_stmt>
</block_content></block></function>
</unit>

<unit revision="1.1.0" language="Python">
<class>class <name>Car</name><block>:<block_content>
    <pass>pass</pass>
</block_content></block></class>
</unit>

<unit revision="1.1.0" language="Python">
<function>def <name>foo</name><parameter_list>()</parameter_list><block>:<block_content>
    <function>def <name>bar</name><parameter_list>()</parameter_list><block>:<block_content>
        <function>def <name>bin</name><parameter_list>()</parameter_list><block>:<block_content>
            <pass>pass</pass>
</block_content></block></function></block_content></block></function></block_content></block></function>
</unit>

<unit revision="1.1.0" language="Python">
<function>def <name>a</name><parameter_list>()</parameter_list><block>:<block_content>
    <function>def <name>a_a</name><parameter_list>()</parameter_list><block>:<block_content>
        <function>def <name>a_a_a</name><parameter_list>()</parameter_list><block>:<block_content>
            <pass>pass</pass>
</block_content></block></function></block_content></block></function>    <function>def <name>a_b</name><parameter_list>()</parameter_list><block>:<block_content>
        <function>def <name>a_b_a</name><parameter_list>()</parameter_list><block>:<block_content>
            <pass>pass</pass>
</block_content></block></function></block_content></block></function>    <function>def <name>a_c</name><parameter_list>()</parameter_list><block>:<block_content>
        <pass>pass</pass>
</block_content></block></function></block_content></block></function><function>def <name>b</name><parameter_list>()</parameter_list><block>:<block_content>
    <pass>pass</pass>
</block_content></block></function>
</unit>

</unit>
